name: "CodeQL - Project Analysis"

on:
  workflow_call:
    inputs:
      WORKING_DIRECTORY:
        required: true
        type: string
        description: "Working directory of the project"
      SCRIPTING_LANGUAGES:
        required: true
        type: string
        description: "Scripting languages used in the project"
      TAG_NAME:
        required: true
        type: string
        description: "Tag name of the project"
        
jobs:
  codeql_analysis:
    name: CodeQL
    runs-on: ubuntu-latest

    # If we need to run the whole workflow on a specific directory we can set the bellow:
    # defaults:
    #   run:
    #     working-directory: ${{ inputs.WORKING_DIRECTORY }}

    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ inputs.SCRIPTING_LANGUAGES }}
          queries: security-extended,security-and-quality
          # config-file: ${{ inputs.WORKING_DIRECTORY }}/codeql-config.yml       
          
      # Autobuild attempts to build any compiled languages (C/C++, C#, or Java). 
      - name: Autobuild on ${{ inputs.WORKING_DIRECTORY }}
        id: autobuild
        uses: github/codeql-action/autobuild@v2
        with:
          working-directory: ${{ inputs.WORKING_DIRECTORY }}
        continue-on-error: true

      # If the Autobuild fails above, then build it manually.
      - if: steps.autobuild.outcome == 'failure'
        name: Manual Build  
        run: |
          echo "Run partial build on part of monorepo"
          mvn compile -pl ${{ inputs.WORKING_DIRECTORY }} -B -V

      - name: Perform CodeQL Analysis and Upload the results for ${{ inputs.WORKING_DIRECTORY }}
        uses: "./.github/actions/codeql-analysis-and-upload"
        with:
          scripting-languages: ${{ inputs.SCRIPTING_LANGUAGES }}
          tag-name: ${{ inputs.TAG_NAME }}